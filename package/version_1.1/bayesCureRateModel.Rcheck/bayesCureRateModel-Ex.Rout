
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "bayesCureRateModel"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "bayesCureRateModel-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('bayesCureRateModel')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("bayesCureRateModel-package")
> ### * bayesCureRateModel-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bayesCureRateModel-package
> ### Title: Bayesian Cure Rate Modeling for Time-to-Event Data
> ### Aliases: bayesCureRateModel-package bayesCureRateModel
> ### Keywords: package
> 
> ### ** Examples
> 
> # TOY EXAMPLE (very small numbers... only for CRAN check purposes)
> # simulate toy data 
> 	set.seed(10)
> 	n = 4
> 	stat = rbinom(n, size = 1, prob = 0.5)
> 	x <- cbind(1, matrix(rnorm(n), n, 1))
> 	y <- rexp(n)
> # run a weibull model with default prior setup
> # considering 2 heated chains 
> 	fit1 <- cure_rate_MC3(y = y, X = x, Censoring_status = stat, 
+ 		promotion_time = list(distribution = 'weibull'),
+ 		nChains = 2, 
+ 		nCores = 1, 
+ 		mcmc_cycles = 3, sweep=2)

> #	print method
> 	fit1	

* Run information: 
      Fitted model: `weibull'
      BIC: 22.62
      AIC: 26.302
      MCMC cycles: 3
      Number of parallel heated chains: 2
      Swap rates of adjacent chains: 
  Min. Median   Max. 
     1      1      1 

* Maximum A Posteriori (MAP) estimate of parameters 
             MAP estimate
g_mcmc       0.0009176876
lambda_mcmc  1.1106261091
a1_mcmc      0.4389705601
a2_mcmc      1.6405821364
b0_mcmc []  -2.4181760802
b1_mcmc []  -0.5114432177

> # 	summary method	
> 	summary1 <- summary(fit1)
By default, I will discard the first one third of the mcmc sample as burn-in period.
 Alternatively, you may set the "burn" parameter to another value. 
                           MCMC summary 
            MAP_estimate   HPD_interval
g_mcmc              0.00  (-0.82, 2.98)
lambda_mcmc         1.11    (1.03, 1.4)
a1_mcmc             0.44   (0.19, 1.35)
a2_mcmc             1.64   (0.11, 2.06)
b0_mcmc            -2.42  (-3.88, 2.92)
b1_mcmc            -0.51 (-0.52, -0.48)

Among 2 censored observations, I found 1 cured subjects (FDR = 0.1).
> 	
> # WARNING: the following parameters
> #  mcmc_cycles, nChains
> #        should take _larger_ values. E.g. a typical implementation consists of:
> #        mcmc_cycles = 15000, nChains = 12
> 	
> ## No test: 
> # run a Gamma mixture model with K = 2 components and default prior setup
> 	fit2 <- cure_rate_MC3(y = y, X = x, Censoring_status = stat, 
+ 		promotion_time = list(
+ 			distribution = 'gamma_mixture',
+ 		        K = 2),
+ 		nChains = 8, nCores = 2, 
+ 		mcmc_cycles = 10)

> 	summary2 <- summary(fit2)
By default, I will discard the first one third of the mcmc sample as burn-in period.
 Alternatively, you may set the "burn" parameter to another value. 
                           MCMC summary 
            MAP_estimate                          HPD_interval
g_mcmc             -0.68         (-1.11, -1.03)U(-1.02, -0.18)
lambda_mcmc         0.63 (0.6, 0.61)U(0.62, 0.65)U(0.68, 0.69)
a1_mcmc             0.35              (0.19, 0.4)U(0.44, 0.49)
a2_mcmc            10.86            (0.32, 1.99)U(7.01, 12.78)
a3_mcmc             0.62              (0.44, 0.68)U(0.84, 0.9)
a4_mcmc             0.12             (0.03, 0.14)U(0.57, 0.61)
w1                  0.15                          (0.11, 0.16)
b0_mcmc            -0.23         (-0.64, -0.58)U(-0.55, -0.16)
b1_mcmc            -0.89            (-0.96, -0.88)U(1.2, 1.21)

Among 2 censored observations, I found 0 cured subjects (FDR = 0.1).
> ## End(No test)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bayesCureRateModel-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("complete_log_likelihood_general")
> ### * complete_log_likelihood_general
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: complete_log_likelihood_general
> ### Title: Logarithm of the complete log-likelihood for the general cure
> ###   rate model.
> ### Aliases: complete_log_likelihood_general
> 
> ### ** Examples
> 
> # simulate toy data 
> 	set.seed(1)
> 	n = 4
> 	stat = rbinom(n, size = 1, prob = 0.5)
> 	x <- cbind(1, matrix(rnorm(n), n, 1))
> 	y <- rexp(n)
> 	lw <- log_weibull(y, a1 = 1, a2 = 1, c_under = 1e-9)
> # compute complete log-likelihood
> complete_log_likelihood_general(y = y, X = x, 
+ 	Censoring_status = stat, 
+ 	g = 1, lambda = 1, 
+ 	log_f = lw$log_f, log_F = lw$log_F, 
+ 	b = c(-0.5,0.5), 
+ 	I_sim = stat, alpha = 1)
$cll
[1] -5.03808

$logS
           [,1]
[1,] -0.1348432
[2,] -0.9415095
[3,] -0.3278886
[4,] -0.2525897

$logP0
           [,1]
[1,] -0.3802176
[2,] -1.1663142
[3,] -0.6577214
[4,] -0.3829768

> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("complete_log_likelihood_general", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cure_rate_MC3")
> ### * cure_rate_MC3
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cure_rate_MC3
> ### Title: Main function of the package
> ### Aliases: cure_rate_MC3
> 
> ### ** Examples
> 
> # simulate toy data just for cran-check purposes        
> 	set.seed(10)
>         n = 4
>         stat = rbinom(n, size = 1, prob = 0.5)
>         x <- cbind(1, matrix(rnorm(2*n), n, 2))
>         y <- rexp(n)
> 	fit1 <- cure_rate_MC3(y = y, X = x, Censoring_status = stat, 
+ 		promotion_time = list(distribution = 'weibull'),
+ 		nChains = 2, nCores = 1, 
+ 		mcmc_cycles = 3, sweep = 2)

> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cure_rate_MC3", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cure_rate_mcmc")
> ### * cure_rate_mcmc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cure_rate_mcmc
> ### Title: The basic MCMC scheme.
> ### Aliases: cure_rate_mcmc
> 
> ### ** Examples
> 
> # simulate toy data just for cran-check purposes        
>         set.seed(1)
>         n = 10
>         stat = rbinom(n, size = 1, prob = 0.5)
>         x <- cbind(1, matrix(rnorm(2*n), n, 2))
>         y <- rexp(n)
> # run a weibull model (including const. term) 
> #	for m = 10 mcmc iterations 
>         fit1 <- cure_rate_mcmc(y = y, X = x, Censoring_status = stat, 
+               	plot = FALSE,
+                 promotion_time = list(distribution = 'weibull', 
+                         prior_parameters = matrix(rep(c(2.1, 1.1), 2), 
+                                                 byrow = TRUE, 2, 2),
+                         prop_scale = c(0.1, 0.1)
+                 ),
+                 m = 10)
> #	the generated mcmc sampled values         
> 	fit1$mcmc_sample
Markov Chain Monte Carlo (MCMC) output:
Start = 1 
End = 10 
Thinning interval = 1 
        g_mcmc lambda_mcmc   a1_mcmc   a2_mcmc  b0_mcmc    b1_mcmc  b2_mcmc
 [1,] 2.303824   0.3219809 0.3904313 0.2310867 1.984321 -0.8590262 2.476608
 [2,] 2.286872   0.3252929 0.3904313 0.2458244 1.961350 -0.8464924 2.473637
 [3,] 2.288132   0.3276657 0.4049834 0.2496207 1.961771 -0.8408309 2.459359
 [4,] 2.294602   0.3276766 0.3817989 0.2829729 1.961771 -0.8408309 2.459359
 [5,] 2.296661   0.3294410 0.3788018 0.2899781 1.966916 -0.8374465 2.467230
 [6,] 2.241553   0.3372597 0.3561721 0.2913320 1.966916 -0.8374465 2.467230
 [7,] 2.212945   0.3375166 0.3010859 0.2801101 1.966916 -0.8374465 2.467230
 [8,] 2.176801   0.3365036 0.2988792 0.2790579 1.966916 -0.8374465 2.467230
 [9,] 2.133788   0.3334789 0.2800113 0.3005298 1.992800 -0.8740759 2.457032
[10,] 2.134571   0.3334789 0.2800113 0.3005298 1.972354 -0.9068000 2.433378
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cure_rate_mcmc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("log_dagum")
> ### * log_dagum
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: log_dagum
> ### Title: PDF and CDF of the Dagum distribution
> ### Aliases: log_dagum
> 
> ### ** Examples
> 
> log_dagum(y = 1:10, a1 = 1, a2 = 1, a3 = 1, c_under = 1e-9)
$log_f
 [1] -1.386294 -2.197225 -2.772589 -3.218876 -3.583519 -3.891820 -4.158883
 [8] -4.394449 -4.605170 -4.795791

$log_F
 [1] -0.69314718 -0.40546511 -0.28768207 -0.22314355 -0.18232156 -0.15415068
 [7] -0.13353139 -0.11778304 -0.10536052 -0.09531018

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("log_dagum", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("log_gamma")
> ### * log_gamma
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: log_gamma
> ### Title: PDF and CDF of the Gamma distribution
> ### Aliases: log_gamma
> 
> ### ** Examples
> 
> log_gamma(y = 1:10, a1 = 1, a2 = 1, c_under = 1e-9)
$log_f
 [1]  -1  -2  -3  -4  -5  -6  -7  -8  -9 -10

$log_F
 [1] -4.586751e-01 -1.454135e-01 -5.106918e-02 -1.848545e-02 -6.760749e-03
 [6] -2.481829e-03 -9.122980e-04 -3.355189e-04 -1.234174e-04 -4.540096e-05

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("log_gamma", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("log_gamma_mixture")
> ### * log_gamma_mixture
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: log_gamma_mixture
> ### Title: PDF and CDF of a Gamma mixture distribution
> ### Aliases: log_gamma_mixture
> 
> ### ** Examples
> 
> y <- runif(10)
> a1 <- c(1,2)
> a2 <- c(1,1)
> p <- c(0.9,0.1)
> log_gamma_mixture(y, a1, a2, p)
$log_f
 [1] -0.3417950 -0.4369693 -0.6165071 -0.9174294 -0.2848807 -0.9086027
 [7] -0.9502231 -0.6953067 -0.6669079 -0.1603051

$log_F
 [1] -1.5472870 -1.2549790 -0.9068804 -0.5795853 -1.7948007 -0.5866445
 [7] -0.5543167 -0.7997648 -0.8360934 -2.9167772

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("log_gamma_mixture", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("log_gompertz")
> ### * log_gompertz
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: log_gompertz
> ### Title: PDF and CDF of the Gompertz distribution
> ### Aliases: log_gompertz
> 
> ### ** Examples
> 
> log_gompertz(y = 1:10, a1 = 1, a2 = 1, c_under = 1e-9)
$log_f
 [1] -7.182818e-01 -4.389056e+00 -1.608554e+01 -4.959815e+01 -1.424132e+02
 [6] -3.964288e+02 -1.088633e+03 -2.971958e+03 -8.093084e+03 -2.201547e+04

$log_F
 [1]  -1.976879e-01  -1.681254e-03  -5.143475e-09  -5.279821e-24  -9.534072e-65
 [6] -1.688090e-175   0.000000e+00   0.000000e+00   0.000000e+00   0.000000e+00

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("log_gompertz", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("log_logLogistic")
> ### * log_logLogistic
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: log_logLogistic
> ### Title: PDF and CDF of the log-Logistic distribution.
> ### Aliases: log_logLogistic
> 
> ### ** Examples
> 
> log_logLogistic(y = 1:10, a1 = 1, a2 = 1, c_under = 1e-9)
$log_f
 [1] -1.386294 -2.197225 -2.772589 -3.218876 -3.583519 -3.891820 -4.158883
 [8] -4.394449 -4.605170 -4.795791

$log_F
 [1] -0.69314718 -0.40546511 -0.28768207 -0.22314355 -0.18232156 -0.15415068
 [7] -0.13353139 -0.11778304 -0.10536052 -0.09531018

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("log_logLogistic", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("log_lomax")
> ### * log_lomax
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: log_lomax
> ### Title: PDF and CDF of the Lomax distribution
> ### Aliases: log_lomax
> 
> ### ** Examples
> 
> log_lomax(y = 1:10, a1 = 1, a2 = 1, c_under = 1e-9)
$log_f
 [1] -1.386294 -2.197225 -2.772589 -3.218876 -3.583519 -3.891820 -4.158883
 [8] -4.394449 -4.605170 -4.795791

$log_F
 [1] -0.69314718 -0.40546511 -0.28768207 -0.22314355 -0.18232156 -0.15415068
 [7] -0.13353139 -0.11778304 -0.10536052 -0.09531018

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("log_lomax", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("log_weibull")
> ### * log_weibull
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: log_weibull
> ### Title: PDF and CDF of the Weibull distribution
> ### Aliases: log_weibull
> 
> ### ** Examples
> 
> log_weibull(y = 1:10, a1 = 1, a2 = 1, c_under = 1e-9)
$log_f
      [,1]
 [1,]   -1
 [2,]   -2
 [3,]   -3
 [4,]   -4
 [5,]   -5
 [6,]   -6
 [7,]   -7
 [8,]   -8
 [9,]   -9
[10,]  -10

$log_F
               [,1]
 [1,] -4.586751e-01
 [2,] -1.454135e-01
 [3,] -5.106918e-02
 [4,] -1.848545e-02
 [5,] -6.760749e-03
 [6,] -2.481829e-03
 [7,] -9.122980e-04
 [8,] -3.355189e-04
 [9,] -1.234174e-04
[10,] -4.540096e-05

> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("log_weibull", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.bayesCureModel")
> ### * plot.bayesCureModel
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.bayesCureModel
> ### Title: Plot method
> ### Aliases: plot.bayesCureModel
> 
> ### ** Examples
> 
> # simulate toy data just for cran-check purposes        
>         set.seed(1)
>         n = 4
>         stat = rbinom(n, size = 1, prob = 0.5)
>         # simulate design matrix
>         #	first column consists of 1s (const)
>         #	and second and third column contain
>         #	the values of two covariates
>         x <- cbind(1, matrix(rnorm(2*n), n, 2))
>         colnames(x) <- c('const', 'x1', 'x2')
>         y <- rexp(n)
> 	fit1 <- cure_rate_MC3(y = y, X = x, Censoring_status = stat, 
+ 		promotion_time = list(distribution = 'exponential'),
+ 		nChains = 2, nCores = 1,
+ 		mcmc_cycles = 3, sweep = 2)

> 	# plot the marginal posterior distribution of the first parameter in returned mcmc output
> 	plot(fit1, what = 1, burn = 0)
> # using 'cured_prob'
> ## No test: 
> 	#compute cured probability for two individuals with 
> 	#	x1 = 0.2 and x2 = -1
> 	#	and 
> 	#	x1 = -1 and x2 = 0
> 	covariate_levels1 <- rbind(c(1,0.2,-1), c(1,-1,0))
> 	summary1 <- summary(fit1, covariate_levels = covariate_levels1, burn = 0)
> 	plot(fit1, what='cured_prob', p_cured_output = summary1$p_cured_output, 
+ 	  ylim = c(0,1))
> 	
> ## End(No test)
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.bayesCureModel", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summary.bayesCureModel")
> ### * summary.bayesCureModel
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summary.bayesCureModel
> ### Title: Summary method.
> ### Aliases: summary.bayesCureModel
> 
> ### ** Examples
> 
> # simulate toy data just for cran-check purposes        
>         set.seed(1)
>         n = 4
>         stat = rbinom(n, size = 1, prob = 0.5)
>         x <- cbind(1, matrix(rnorm(2*n), n, 2))
>         y <- rexp(n)
> 	fit1 <- cure_rate_MC3(y = y, X = x, Censoring_status = stat, 
+ 		promotion_time = list(distribution = 'exponential'),
+ 		nChains = 2, nCores = 1, 
+ 		mcmc_cycles = 3, sweep = 2)

> 	mySummary <- summary(fit1, burn = 0)
                           MCMC summary 
            MAP_estimate                 HPD_interval
g_mcmc              0.76 (-6.71, -1.73)U(-1.19, 2.35)
lambda_mcmc         0.25   (-0.11, 0.69)U(0.81, 1.94)
a1_mcmc             1.48                 (1.06, 1.56)
b0_mcmc            -0.08   (-0.78, 0.78)U(1.03, 3.23)
b1_mcmc            -2.76 (-3.58, -1.75)U(-1.48, 1.12)
b2_mcmc            -0.76 (-0.98, -0.49)U(-0.41, 0.29)

Among 2 censored observations, I found 1 cured subjects (FDR = 0.1).
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summary.bayesCureModel", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.375 0.152 4.133 0.778 0.324 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
