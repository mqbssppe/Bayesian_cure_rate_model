// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// log_weibull
List log_weibull(arma::vec y, double a1, double a2, double c_under);
RcppExport SEXP _bayesCureRateModel_log_weibull(SEXP ySEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP c_underSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type c_under(c_underSEXP);
    rcpp_result_gen = Rcpp::wrap(log_weibull(y, a1, a2, c_under));
    return rcpp_result_gen;
END_RCPP
}
// complete_log_likelihood_general
List complete_log_likelihood_general(arma::vec y, arma::mat X, IntegerVector Censoring_status, double g, double lambda, arma::vec log_f, arma::vec log_F, arma::vec b, IntegerVector I_sim, double alpha);
RcppExport SEXP _bayesCureRateModel_complete_log_likelihood_general(SEXP ySEXP, SEXP XSEXP, SEXP Censoring_statusSEXP, SEXP gSEXP, SEXP lambdaSEXP, SEXP log_fSEXP, SEXP log_FSEXP, SEXP bSEXP, SEXP I_simSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Censoring_status(Censoring_statusSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type log_f(log_fSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type log_F(log_FSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type I_sim(I_simSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(complete_log_likelihood_general(y, X, Censoring_status, g, lambda, log_f, log_F, b, I_sim, alpha));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bayesCureRateModel_log_weibull", (DL_FUNC) &_bayesCureRateModel_log_weibull, 4},
    {"_bayesCureRateModel_complete_log_likelihood_general", (DL_FUNC) &_bayesCureRateModel_complete_log_likelihood_general, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_bayesCureRateModel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
